#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
	int array[] = {2,4,7,8,9,10};
	int n = sizeof(array)/sizeof(array[0]);
	int temp;
	
	for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (array[i] > array[j]) {
                temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
    }
    
    for (int i = 0; i < n; i = i + 2) {
        if (i < n - 1) {
        	temp = array[i];
            array[i] = array[i + 1];
            array[i + 1] = temp;
        }
    }
    cout<<"array in waveform:";
        for (int i = 0; i < n; i++) {
    	cout << array[i] << " ";   	
	}
	cout<<endl;
	return 0;
}
*/
// move zeros to end
/*
#include<iostream>
#include<algorithm>
using namespace std;

void rearrangeArray(int arr[], int N) {
    int count = 0; 
    
    for (int i = 0; i < N; i++) {
        if (arr[i] != 0) { 
            arr[count] = arr[i]; 
            count++; 
      }
    }
   
    for (int i = count; i < N; i++) {
        arr[i] = 0;
    }
}
int main() {
    int arr[] = {8, 4, 0, 2, 5, 0, 1, 0, 7, 0};
    int N = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Original Array: ";
    for (int i = 0; i < N; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    rearrangeArray(arr, N);

    cout << "Rearranged Array: ";
    for (int i = 0; i < N; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}

3rd
#include<iostream>
using namespace std;

void findMissing(int arr[], int N)
{
	int i;
	int temp[N + 1];
	for(int i = 0; i < N; i++){
	temp[i] = 0;
	}
	for(i = 0; i < N; i++){
	temp[arr[i] - 1] = 1;
	}

	int ans;
	for (i = 0; i < N ; i++) {
		if (temp[i] == 0)
			ans = i + 1;
	}
	cout << ans;
}
int main()
{
	int arr[] = { 1, 3, 7, 4, 6, 2 };
	int n = sizeof(arr) / sizeof(arr[0]);
	findMissing(arr, n);
}


31/01/24

1)
#include <iostream>
#include <unordered_set>
using namespace std;

bool hasDuplicates(const int data[], int size) {
   unordered_set<int> seen;
   for (int i = 0; i < size; i++) {
       if (seen.count(data[i])) {
           return true;
       }
       seen.insert(data[i]);
   }
   return false;
}
int main() {
   int data1[] = {1, 2, 1, 3, 1};
   int size1 = sizeof(data1) / sizeof(data1[0]);
   int data2[] = {1, 2, 3, 4, 5};
   int size2 = sizeof(data2) / sizeof(data2[0]);
   cout << boolalpha;
   cout << hasDuplicates(data1, size1) << endl;
   cout << hasDuplicates(data2, size2) << endl;

   return 0;
}